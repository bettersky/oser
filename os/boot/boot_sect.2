[org 0x7c00]

mov ah,0xe
mov cx,3
mov al,0x31
read:    
	mov ah,0x42
	mov dl,0x80

	mov si,0x0
	mov ds,si
	mov si,0x8000
	mov byte [si],0x10
	mov word [si+2],0x1
	mov dword[si+4],0x9c00
	mov dword[si+8],0x1
	mov dword[si+12],0x0
	int 0x13  
	jnc read_end 
	int 10h
	inc al
	dec cx
	cmp cx,0
	jz disk_error	
read_end:

mov bp,0x9000 ;set the stack
mov sp,bp
mov bx,MSG_REAL_MODE
call print_string
call switch_to_pm
jmp $
disk_error:
	mov bx,ERR
	call print_string

jmp $
;%include "print_string.asm"
print_string:
	print_string_begin:
		mov ah,0xe
		mov al,[bx]
		cmp al,0x0
		jz print_string_end
		int 0x10
		inc bx
		jmp print_string_begin
	print_string_end:
ret	
;%include "gdt.asm"
	gdt_start:

	gdt_null:
		dd 0x0
		dd 0x0

	gdt_code:
		dw 0xffff
		dw 0x0
		db 0x0
		db 10011010b
		db 11001111b
		db 0x0

	gdt_data:
		dw 0xffff
		dw 0x0
		db 0x0
		db 10010010b
		db 11001111b
		db 0x0

	gdt_end:

	gdt_descriptor:
		dw gdt_end - gdt_start - 1
		dd gdt_start
	CODE_SEG equ gdt_code - gdt_start
	DATA_SEG equ gdt_data - gdt_start
;%include "print_string_pm.asm"	
;%include "switch_to_pm.asm"
	[bits 16]
			switch_to_pm:
				cli
				lgdt [gdt_descriptor]
				mov eax,cr0
				or eax,0x1
				mov cr0,eax
				jmp CODE_SEG:init_pm
			[bits 32]
			init_pm:
				mov ax,DATA_SEG
				mov ds,ax
				mov ss,ax
		
				mov es,ax
				mov fs,ax
				mov gs,ax
				mov ebp,0x90000
				mov esp,ebp

				call 0x9c00
	jmp $
MSG_REAL_MODE:
	db "Start in 16-bit real mode",0

ERR:
db "Disk Eroor:",0

times 0200h - 2 - ($ - $$)  db 0    ; NASM directive: zerofill up to 510 bytes
dw 0AA55h
